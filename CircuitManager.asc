// Circuit System Manager Script

function LoadCircuit(String circuitID)
{
  System.Log(eLogAlert, "Loading Circuit with ID:");
  System.Log(eLogAlert, circuitID);
  System.Log(eLogAlert, String.Format("%d", Room.ObjectCount));
  int hotspotsInUse = 3; // UPDATE WHEN NEW HOTSPOTS ARE ADDED TO ROOM 2!!!!!
  
  // Hide all objects to create a fresh canvas for circuits
  for (int i = 0; i < Room.ObjectCount; i++)
  {
    System.Log(eLogAlert, object[i].Name);
    if (object[i].GetTextProperty("CircuitID") == circuitID) object[i].Visible = true;
    else object[i].Visible = false;
  }
  // Hide all hotspots to create a fresh canvas for circuits
  // There is no way to get the number of hotspots in use in a room so this loop should be updated when new hotspots are utilized
  for (int i = 1; i <= hotspotsInUse; i++)
  {
    if (hotspot[i].GetTextProperty("CircuitID") == circuitID) hotspot[i].Enabled = true;
    else hotspot[i].Enabled = false;
  }
}

function EnterCircuitEditor(String circuitID)
{
  player.ChangeRoom(2, 160, 245);
  playerXCache = player.x;
  playerYCache = player.y;
  CircuitID = circuitID;
}

function PlayTutorial(String tutorialID) 
{
  switch (tutorialID)
  {
    case "Editor":
      lblCircuitTip.Text = "Attempt to fix circuit boards by identifying broken components.";
      WaitMouse(-1);
      lblCircuitTip.Text = "Look for visual indicators or reference manuals to find broken components.";
      WaitMouse(-1);
      lblCircuitTip.Text = "";
      break;
    case "Wiring":
      lblCircuitTip.Text = "Some circuits require new lengths of wire to be run.";
      WaitMouse(-1);
      lblCircuitTip.Text = "Use wire from your inventory on a connection point to begin running wire.";
      WaitMouse(-1);
      lblCircuitTip.Text = "Then select another connection point to complete the connection.";
      WaitMouse(-1);
      lblCircuitTip.Text = "";
      break;
    default:
      lblCircuitTip.Text = "";
      break;
  }
  tutorialID = "";
}

