// Circuit System Manager Script

function LoadCircuit(String circuitID)
{
  System.Log(eLogAlert, "Loading Circuit with ID:");
  System.Log(eLogAlert, circuitID);
  int hotspotsInUse = 3; // UPDATE WHEN NEW HOTSPOTS ARE ADDED TO ROOM 2!!!!!
  
  // Hide all objects to create a fresh canvas for circuits
  for (int i = 0; i < Room.ObjectCount; i++)
  {
    System.Log(eLogAlert, object[i].Name);
    if (object[i].GetTextProperty("CircuitID") == circuitID) object[i].Visible = true;
    else object[i].Visible = false;
  }
  // Hide all hotspots to create a fresh canvas for circuits
  // There is no way to get the number of hotspots in use in a room so this loop should be updated when new hotspots are utilized
  for (int i = 1; i <= hotspotsInUse; i++)
  {
    if (hotspot[i].GetTextProperty("CircuitID") == circuitID) hotspot[i].Enabled = true;
    else hotspot[i].Enabled = false;
  }
}

function EnterCircuitEditor(String circuitID)
{
  player.ChangeRoom(2, 160, 245);
  playerXCache = player.x;
  playerYCache = player.y;
  CircuitID = circuitID;
}

function PlayTutorial(String tutorialID) 
{
  switch (tutorialID)
  {
    case "Editor":
      lblCircuitTip.Text = "Attempt to fix circuit boards by identifying broken components.";
      WaitMouse(-1);
      lblCircuitTip.Text = "Look for visual indicators or reference manuals to find broken components.";
      WaitMouse(-1);
      lblCircuitTip.Text = "";
      break;
    case "Wiring":
      lblCircuitTip.Text = "Some circuits require new lengths of wire to be run.";
      WaitMouse(-1);
      lblCircuitTip.Text = "Use wire from your inventory on a connection point to begin running wire.";
      WaitMouse(-1);
      lblCircuitTip.Text = "Then select another connection point to complete the connection.";
      WaitMouse(-1);
      lblCircuitTip.Text = "";
      break;
    default:
      lblCircuitTip.Text = "";
      break;
  }
  tutorialID = "";
}

bool runningWire = false;
Object* connectionPointSrc;

function IsWiringComplete () {
  int incompleteWires = 0;
  for (int i = 0; i < Room.ObjectCount; i++)
  {
    if (object[i].GetProperty("ConnectionPoint") != -1) incompleteWires++;
  }
  if (incompleteWires == 0) return true;
  else return false;
}

function AttemptConnection(Object* connectionPointDest) {
  // If the src is an object
  if (connectionPointSrc != null) 
  {
    // If the connection points are not apart of the same circuit return. This would be really weird to happen but I'll account for it anyway.
    if (connectionPointSrc.GetTextProperty("CircuitID") != connectionPointDest.GetTextProperty("CircuitID")) return false;
    int destObjectID = connectionPointSrc.GetProperty("ConnectionPoint");
    
    if (connectionPointDest == object[destObjectID]) {
      object[connectionPointDest.GetProperty("ConnectionResult")].Visible = true;
      
      // Set the connection points on both the source and destination points so they cannot be reused.
      connectionPointSrc.SetProperty("ConnectionPoint", -1);
      connectionPointDest.SetProperty("ConnectionPoint", -1);
      return true;
    }
    else {
      player.Say("I don't think it connects like that?");
      return false;
    }
    connectionPointSrc = null;
  }
  // If the src is not an object (BAD)
  else 
  {
    System.Log(eLogAlert, "Failed circuit connection, this shouldn't happen!");
  }
}

function on_mouse_click(MouseButton button) {
  if (player.Room != 2) return;
  if (button != eMouseLeft) return;
  if (player.ActiveInventory != iWire) return;
  
  
  Object* connectionPointObject = Object.GetAtScreenXY(mouse.x, mouse.y);
  if (connectionPointObject == null) return;
  
  if (connectionPointObject.GetProperty("ConnectionPoint") != -1) {
    if (!runningWire) {
    connectionPointSrc = connectionPointObject;
    runningWire = true;
    return;
    }
    else {
      AttemptConnection(connectionPointObject);
      runningWire = false;
      if (IsWiringComplete()) {
        switch (CircuitID)
        {
          case "FloodLight":
            player.Say("Good thing modern floodlights don't worry about proper voltages!");
            break;
          default:
            System.Log(eLogAlert, "Wiring completed at an unexpected time.");
            break;
        }
      }
    }
  }
}