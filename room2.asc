// room script file

ParticleDefinition* GetSparkParticle()
{
  ParticleDefinition* sparkParticle = new ParticleDefinition;
  sparkParticle.Sprite = 18;
  sparkParticle.LifeTotal = 100;
  sparkParticle.VelX = Random(1500) - 1000;
  sparkParticle.VelY = Random(1500) - 1000;
  sparkParticle.TransparencyBegin = 0;
  sparkParticle.TransparencyEnd = 100;
  sparkParticle.WidthBegin = 1;
  sparkParticle.HeightBegin = 1;
  sparkParticle.Gravity = 100;
  sparkParticle.GroundY = 75;
  sparkParticle.Bounces = true;
  return sparkParticle;
}

Emitter sparkEmitter;

bool previousRoomEnvironmentLitCache;
int playerXCache;
int playerYcache;
int loopIterator = 0;

function room_AfterFadeIn()
{
  if (DoorRepaired) {
    gCircuitExit.Visible = true;
  }
}

function repeatedly_execute_always()
{
  sparkEmitter.Update();
  if (loopIterator >= SecondsToLoops(2.0)) {
    sparkEmitter.Emit();
    loopIterator = 0;
  }
  loopIterator++;
  
}

function room_Leave()
{
  gCircuitExit.Visible = false;
  player.ActiveInventory = null;
  player.UnlockView();
  mouse.Mode = eModeWalkto;
  EnvironmentLit = previousRoomEnvironmentLitCache;
}

function oCapacitor_UseInv(Object *theObject, CursorMode mode)
{
  // Player repairs circuit
  if (player.ActiveInventory == iCapacitor)
  {
    player.Say("This should fix it!");
    //oDoorControllerCapacitor.StopAnimating();
    player.LoseInventory(iCapacitor);
    oDoorControllerCapacitor.Name = "Capacitor";
    oDoorControllerIndicator.Graphic = 51;
    DoorRepaired = true;
    gCircuitExit.Visible = true;
  }
}

function room_Load()
{
  int defs_count = 2048;
  ParticleDefinition *defs[] = new ParticleDefinition[defs_count];
  for(int i=0; i<defs_count; i++)
  {
    defs[i] = GetSparkParticle();
  }
  // Spark Particle emitter init
  sparkEmitter.Init(187, 59, defs, defs_count, 32,  64);
  
  int hotspotsInUse = 1;
  
  previousRoomEnvironmentLitCache = EnvironmentLit;
  EnvironmentLit = true;
  player.LockView(3, eKeepMoving);
  player.Move(160, 245, eNoBlock, eAnywhere);
  
  // Hide all objects to create a fresh canvas for circuits
  for (int i = 0; i < Room.ObjectCount; i++)
  {
    object[i].Visible = false;
  }
  // Hide all hotspots to create a fresh canvas for circuits
  // There is no way to get the number of hotspots in use in a room so this loop should be updated when new hotspots are utilized
  for (int i = 1; i <= hotspotsInUse; i++)
  {
    hotspot[i].Enabled = false;
  }
  
  switch (CircuitID)
  {
    case "DoorController":
      // Circuit Hotspot and Background
      hDoorController.Enabled = true;
      oDoorController.Visible = true;
      // Circuit Components
      oDoorControllerCapacitor.SetView(8);
      //if (!DoorRepaired) oDoorControllerCapacitor.Animate(0, 2, eRepeat, eNoBlock);
      oDoorControllerCapacitor.Visible = true;
      oDoorControllerIndicator.Visible = true;
      break;
    case "BreakerBox":
      // Circuit Hotspot and Background
      oBreakerBox.Visible = true;
      oBreakerBoxFuse.Visible = true;
      break;
    case "CommunicationConsole":
      cArin.Say("I don't think I should be picking around in the communication console. It's kind of important.");
      break;
    case "BrokenConsole":
      break;
  }
}

function oBreakerBoxFuse_AnyClick(Object *theObject, CursorMode mode)
{
  player.Say("Looks like the breaker box's fuse is blown!");
  player.Say("Surely I can find another one somewhere around the ship.");
}

function oBreakerBoxFuse_UseInv(Object *theObject, CursorMode mode)
{
if (player.ActiveInventory == iFuse)
  {
    player.Say("Let's get this fuse replaced.");
    theObject.Graphic = 43;
    player.LoseInventory(iFuse);
    player.Say("That should at least get the lights back on!");
  }
}

function oCapacitor_Interact(Object *theObject, CursorMode mode)
{
  if (!DoorRepaired) 
    {
    cArin.Say("Looks to be blown.");
    cArin.Say("Probably what's keeping the door closed.");
    cArin.Say("I think I might have a spare in my pocket!");
    }
  else {
    cArin.Say("No more sparking.");
    cArin.Say("Huge improvement!");
  }
}

function room_RepExec()
{
  
}

function oDoorControllerIndicator_AnyClick(Object *theObject, CursorMode mode)
{
  if (!DoorRepaired) 
    {
    cArin.Say("The indicator light is indicating the controller is broken.");
    cArin.Say("At least that's probably what red means.");
    }
  else {
    cArin.Say("Looks to be fixed!");
  }
}

function hDoorController_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  cArin.Say("This is the controller board for the door.");
}
