// room script file

ParticleDefinition* GetSparkParticle()
{
  ParticleDefinition* sparkParticle = new ParticleDefinition;
  sparkParticle.Sprite = 18;
  sparkParticle.LifeTotal = 100;
  sparkParticle.VelX = Random(1500) - 1000;
  sparkParticle.VelY = Random(1500) - 1000;
  sparkParticle.TransparencyBegin = 0;
  sparkParticle.TransparencyEnd = 100;
  sparkParticle.WidthBegin = 1;
  sparkParticle.HeightBegin = 1;
  sparkParticle.Gravity = 100;
  sparkParticle.GroundY = 75;
  sparkParticle.Bounces = true;
  return sparkParticle;
}

Emitter sparkEmitter;

bool previousRoomEnvironmentLitCache;
int playerXCache;
int playerYcache;
String tutorialID;

bool tutorialPlayedWiring = false;

// Floodlight Circuit Vars
bool runningPosWire = false;
bool runningNegWire = false;
bool posHotwired = false;
bool negHotwired = false;

bool brokenBreakboxFuseTaken = false;

// Whether the sparking particle emitter should be firing every 2 seconds
bool sparking = false;

function room_AfterFadeIn()
{
  if (DoorRepaired) gCircuitExit.Visible = true; // Don't allow the player to exit the circuit GUI until they have figured out the first puzzle
  PlayTutorial(tutorialID);
  tutorialID = "";
}

int loopIterator = 0;
function repeatedly_execute_always()
{
  // Spark every x seconds if sparking == true
  sparkEmitter.Update();
  if (sparking && loopIterator >= SecondsToLoops(2.0)) {
    sparkEmitter.Emit();
    loopIterator = 0;
  }
  loopIterator++;
}

function room_Leave()
{
  gCircuitExit.Visible = false;
  player.ActiveInventory = null;
  player.UnlockView();
  mouse.Mode = eModeWalkto;
  EnvironmentLit = previousRoomEnvironmentLitCache;
}

function oCapacitor_UseInv(Object *theObject, CursorMode mode)
{
  // Player repairs circuit
  if (player.ActiveInventory == iCapacitor)
  {
    player.Say("This should fix it!");
    player.LoseInventory(iCapacitor);
    oDoorControllerCapacitor.Name = "Capacitor";
    oDoorControllerIndicator.Graphic = 51;
    DoorRepaired = true;
    sparking = false;
    gCircuitExit.Visible = true;
  }
}

function room_Load()
{
  // Particle Init
  int defs_count = 2048;
  ParticleDefinition *defs[] = new ParticleDefinition[defs_count];
  for(int i=0; i<defs_count; i++)
  {
    defs[i] = GetSparkParticle();
  }
  sparkEmitter.Init(187, 59, defs, defs_count, 32,  64);
  
  // Player/Room setup
  previousRoomEnvironmentLitCache = EnvironmentLit;
  EnvironmentLit = true;
  sparking = false;
  lblCircuitTip.Text = "";
  player.LockView(3, eKeepMoving);
  //player.Move(160, 245, eNoBlock, eAnywhere);
  
  LoadCircuit(CircuitID);
  
  // Setup Room based on CircuitID called
  switch (CircuitID)
  {
    case "DoorController":
      if (!DoorRepaired) { 
        sparking = true; 
        tutorialID = "Editor";
      }
      break;
    case "BreakerBox":
      break;
    case "CommunicationConsole":
      cArin.Say("I don't think I should be picking around in the communication console. It's kind of important.");
      break;
    case "BrokenConsole":
      break;
    case "FloodLight":
      if (posHotwired) oHotwirePos.Visible = true;
      if (negHotwired) oHotwireNeg.Visible = true;
      if (!tutorialPlayedWiring) {
        tutorialID = "Wiring";
        tutorialPlayedWiring = true;
      }
      break;
    case "BrokenBreakerbox":
      oBreakerBox.Visible = true;
      if (!brokenBreakboxFuseTaken) oBrokenBreakerBoxFuse.Visible = true;
      break;
  }
}
function oBreakerBoxFuse_AnyClick(Object *theObject, CursorMode mode)
{
  player.Say("Looks like the breaker box's fuse is blown!");
  player.Say("Surely I can find another one somewhere around the ship.");
}

function oBreakerBoxFuse_UseInv(Object *theObject, CursorMode mode)
{
  if (player.ActiveInventory == iFuse)
  {
    player.Say("Let's get this fuse replaced.");
    theObject.Graphic = 43;
    player.LoseInventory(iFuse);
    player.Say("That should at least get the lights back on!");
    EnvironmentLit = true;
  }
}

function oCapacitor_Interact(Object *theObject, CursorMode mode)
{
  if (!DoorRepaired) 
    {
    cArin.Say("Looks to be blown.");
    cArin.Say("Probably what's keeping the door closed.");
    cArin.Say("I think I might have a spare in my pocket!");
    }
  else {
    cArin.Say("No more sparking.");
    cArin.Say("Huge improvement!");
  }
}

function oDoorControllerIndicator_AnyClick(Object *theObject, CursorMode mode)
{
  if (!DoorRepaired) 
    {
    cArin.Say("The indicator light is indicating the controller is broken.");
    cArin.Say("At least that's probably what red means.");
    }
  else {
    cArin.Say("Looks to be fixed!");
  }
}

function hDoorController_AnyClick(Hotspot *theHotspot, CursorMode mode)
{
  cArin.Say("This is the controller board for the door.");
}

// TODO Refactor wire connections, this is miserable

function oNegTerminal_UseInv(Object *theObject, CursorMode mode)
{
  if (negHotwired) return;
  if (runningPosWire) {
    player.Say("That's not how you're supposed to connect batteries!");
    runningNegWire = false;
    runningPosWire = false;
    player.ActiveInventory = null;
    return;
  }
  if (runningNegWire) {
    sparkEmitter.SetPosition(161, 174);
    sparkEmitter.Emit();
    player.ActiveInventory = null;
    oHotwireNeg.Visible = true;
    negHotwired = true;
    runningNegWire = false;
    runningPosWire = false;
    if (posHotwired && negHotwired) {
      FloodlightRepaired = true;
      player.Say("Good thing modern floodlights don't worry about proper voltages!");
    }
    return;
  }
  if (player.ActiveInventory == iWire) {
    sparkEmitter.SetPosition(161, 174);
    sparkEmitter.Emit();
    runningNegWire = true;
  }
}

function oPosTerminal_UseInv(Object *theObject, CursorMode mode)
{
  /*
  if (posHotwired) return;
  if (runningPosWire) {
    player.Say("That's not how you're supposed to connect batteries!");
    runningNegWire = false;
    runningPosWire = false;
    player.ActiveInventory = null;
    return;
  }
  if (runningPosWire) {
    sparkEmitter.SetPosition(59, 174);
    sparkEmitter.Emit();
    player.ActiveInventory = null;
    oHotwirePos.Visible = true;
    posHotwired = true;
    runningNegWire = false;
    runningPosWire = false;
    if (posHotwired && negHotwired) {
      FloodlightRepaired = true;
      player.Say("Good thing modern floodlights don't worry about proper voltages!");
    }
    return;
  }
  if (player.ActiveInventory == iWire) {
    sparkEmitter.SetPosition(59, 174);
    sparkEmitter.Emit();
    runningPosWire = true;
  }
  */
}

function hFloodLightNeg_UseInv(Hotspot *theHotspot, CursorMode mode)
{
  if (negHotwired) return;
  if (runningPosWire) {
    player.Say("I think that might be backwards?");
    runningNegWire = false;
    runningPosWire = false;
    player.ActiveInventory = null;
    return;
  }
  if (runningNegWire) {
    sparkEmitter.SetPosition(98, 109);
    sparkEmitter.Emit();
    player.ActiveInventory = null;
    oHotwireNeg.Visible = true;
    negHotwired = true;
    runningNegWire = false;
    runningPosWire = false;
    if (posHotwired && negHotwired) {
      FloodlightRepaired = true;
      player.Say("Good thing modern floodlights don't worry about proper voltages!");
    }
    return;
  }
  if (player.ActiveInventory == iWire) {
    sparkEmitter.SetPosition(98, 109);
    sparkEmitter.Emit();
    runningNegWire = true;
  }
}

function hFloodLightPos_UseInv(Hotspot *theHotspot, CursorMode mode)
{
  if (posHotwired) return;
  if (runningNegWire) {
    player.Say("I think that might be backwards?");
    runningNegWire = false;
    runningPosWire = false;
    player.ActiveInventory = null;
    return;
  }
  if (runningPosWire) {
    sparkEmitter.SetPosition(93, 120);
    sparkEmitter.Emit();
    player.ActiveInventory = null;
    oHotwirePos.Visible = true;
    posHotwired = true;
    runningNegWire = false;
    runningPosWire = false;
    if (posHotwired && negHotwired) {
      FloodlightRepaired = true;
      player.Say("Good thing modern floodlights don't worry about proper voltages!");
    }
    return;
  }
  if (player.ActiveInventory == iWire) {
    sparkEmitter.SetPosition(93, 120);
    sparkEmitter.Emit();
    runningPosWire = true;
  }
}

function oBrokenBreakerBoxFuse_AnyClick(Object *theObject, CursorMode mode)
{
  player.AddInventory(iFuse);
  oBrokenBreakerBoxFuse.Visible = false;
  brokenBreakboxFuseTaken = true;
  FuseObtained = true;
}

function oNegWire_AnyClick(Object *theObject, CursorMode mode)
{

}

function oPosWire_AnyClick(Object *theObject, CursorMode mode)
{

}
